# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.7"

default_platform :ios

platform :ios do
    before_all do
        
    end
    
    desc "Bumps build number and runs unit tests on each push to development branch"
    desc "If successful, pushes the bumped version to git"
    lane :development do
        ensure_git_branch(branch: ENV["DEVELOPMENT_BRANCH"])
        ensure_git_status_clean
        
#        checkout_dependencies
        #sh "cd .. && carthage.sh update --use-submodules --use-xcframeworks"
        
        build_spm

        #run_unit_tests
        
        bump_build_number
        
        push_to_git_remote
        
        notify_slack_dev_success
    end
    
    lane :release do
        version = "v" + get_version_number(
                                           xcodeproj: ENV["XCODE_PROJECT"],
                                           target: "iOSClientPlayer"
                                           )
        
        if !git_tag_exists(tag: version)
        
            Action.sh("git branch '#{version}'")
            Action.sh("git checkout '#{version}'")
            
            update_graph
            run_unit_tests
            
            add_git_tag(tag: version)
            Action.sh("git push origin --all")
            Action.sh("git push --tags")
            
            current_time = Time.now.to_f
            project_name = ENV["PROJECT_TITLE"]
        
            slack(
                  use_webhook_configured_username_and_icon: true,
                  default_payloads: [],
                  attachment_properties: {
                  pretext: "#{project_name} #{version} released",
                        color: "good",
                        text: "Released!",
                        footer: ENV["DEV_TEAM_NAME"],
                        ts: current_time,
                    }
                  )
        end
    end
    
    desc "Runs all the tests"
    lane :run_unit_tests do
        
        UI.success("== iOS Unit tests ==")
        scan(
             workspace: ENV["UNIT_TEST_WORKSPACE"],
             scheme: ENV["IOS_UNIT_TEST_SCHEME"]
             )
        
        UI.success("== tvOS Unit tests ==")
        scan(
             workspace: ENV["UNIT_TEST_WORKSPACE"],
             scheme: ENV["TVOS_UNIT_TEST_SCHEME"]
             )
             
    end
    
    
    # Private lanes

    desc "Build project using spm"
    lane :build_spm do

        sh 'swift build -Xswiftc "-sdk" -Xswiftc "`xcrun --sdk iphonesimulator --show-sdk-path`" -Xswiftc "-target" -Xswiftc "x86_64-apple-ios13.0-simulator"'
        UI.success("== iOS Project Build Success ==")

        sh 'swift build -Xswiftc "-sdk" -Xswiftc "`xcrun --sdk appletvsimulator --show-sdk-path`" -Xswiftc "-target" -Xswiftc "x86_64-apple-tvos13.0-simulator"'
        UI.success("== tvOS Project Build Success ==")


    end
    
    private_lane :bump_build_number do
        new_build_number = increment_build_number(xcodeproj: ENV["XCODE_PROJECT"])
        UI.message("Build: #{new_build_number}")
        
        sh 'git update-index --assume-unchanged iOSClientExposure.xcodeproj/project.pbxproj'
        sh 'git update-index --assume-unchanged Package.resolved'
        
        commit_version_bump(
                            message: "Build number bumped: #{new_build_number}",
                            xcodeproj: ENV["XCODE_PROJECT"]
                            )
    end
    
    desc "Checkout latest dependencies as declared in Cartfile.resolved"
    private_lane :update_graph do
        carthage(
                 command: "update",
                 platform: "iOS,tvOS",
                 use_submodules: true,
                 use_ssh: false,
                 use_binaries: false,
                 no_build: true
                 )
        update_dependency_graph()
    end
    
    desc "Checkout latest dependencies as declared in Cartfile.resolved"
    private_lane :checkout_dependencies do
        carthage(
                 command: "update",
                 platform: "iOS,tvOS",
                 use_submodules: true,
                 use_ssh: false,
                 use_binaries: false,
                 no_build: true
                 )
    end
    
    desc "Posts a success notification for development integration"
    desc "in the Players channel on Slack"
    lane :notify_slack_dev_success do
        current_build_number = get_build_number
        current_time = Time.now.to_f
        project_name = ENV["PROJECT_TITLE"]
        
        changelog = changelog_from_git_commits(
                                               commits_count: 10,
                                               pretty: 'â€¢ %s',
                                               merge_commit_filtering: 'exclude_merges'
                                               )
                                               
                                               UI.message(current_time)
        UI.message(current_time)
        slack(
              use_webhook_configured_username_and_icon: true,
              default_payloads: [],
              attachment_properties: {
                    pretext: "#{project_name} build #{current_build_number} succesful!",
                    color: "good",
                    text: changelog,
                    footer: ENV["DEV_TEAM_NAME"],
                    ts: current_time,
                }
              )
    end
    
    after_all do |lane|
        # This block is called, only if the executed lane was successful
        
    end
    
    error do |lane, exception|
        
        slack(
              message: exception.message,
              success: false
              )
              
              UI.error("====> ERROR")
    end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
